#!/usr/bin/env node

var exec = require('child_process').exec,
    fs = require('fs'),
    path = require('path'),
    async = require('async'),
    optcfg = {
        verbose: Boolean,
        debug: Boolean,
        file: String,
        queue: Number
    },
    opts = require('nopt')(optcfg),
    urls = opts.argv.remain,
    cmd = require('phantomjs').path + ' ' + path.join(__dirname, '../lib/https-scan.js '),
    resp = {
    },

    die = function (W) {
        W && console.warn(W);
        console.warn('Usage: ' + process.argv[1] + ' [--' + Object.keys(optcfg).join('] [--') + '] [--] <url>...');
        process.exit(1);
    },

    done = function () {
        var err = 0,
            scan = 0,
            res = 0,
            bad = [],
            dead = [];

        if (opts.debug) {
            console.log(resp);
        }

        Object.keys(resp).forEach(function (U) {
            if (resp[U].bad.length) {
                bad.push(U);
                err += resp[U].bad.length;
                console.log('## Found ' + resp[U].bad.length + ' bad resources in ' + U);
                console.log(resp[U].bad);
            }
            if (resp[U].status !== 'success') {
                dead.push(U);
            }
        });

        if (dead.length) {
            console.log('## ' +  dead.length + ' dead targets not tested!');
            console.log(dead);
        }

        console.log('### All ' + err + ' bad resources be found in ' + bad.length + ' urls !!');
        bad.length && console.log(bad);
        process.exit(err);
    },

    test = function (U, next) {
        if (resp[U]) {
            resp[U].err.push('Duplicate testing targets!');
            return next();
        }
    
        resp[U] = {err: [], out: [], good: [], bad: []};
    
        if (!U.match(/^https/)) {
            resp[U].err.push('Testing on bad url or not https');
            return next();
        }
    
        exec(cmd + U, function(err, stdout, stderr) {
            var match,
                data = JSON.parse(stdout);
    
            opts.verbose && console.log('- ' + U);
            opts.debug && console.log(data);
    
            resp[U].out.push(stdout);
            resp[U].bad = resp[U].bad.concat(data.bad);
            resp[U].good = resp[U].bad.concat(data.good);
            resp[U].stats = data.stats;
    
            next();
        });
    },

    queue = async.queue(test, opts.queue || 10);

if (opts.file) {
    try {
        urls = urls.concat(fs.readFileSync(opts.file, 'utf8').split(/[\r\n]+/));
    } catch (e) {
        die(e);
    }
}

opts.argv.remain.length || urls.length || die();

console.log('** All ' + urls.length + ' urls will be tested.');

queue.drain = done;
queue.push(urls);
